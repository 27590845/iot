<?xml version="1.0" encoding="UTF-8"?>
<!-- logback 学习、测试 生产环境下需要删掉本文件 -->
<!--
logback按如下顺序寻找配置文件:
    1) Logback tries to find a file called logback.groovy in the classpath.
    2)If no such file is found, logback tries to find a file called logback-test.xml in the classpath.
    3)If no such file is found, it checks for the file logback.xml in the classpath..
    4)If neither file is found, logback configures itself automatically using the BasicConfigurator which will cause logging output to be directed to the console.
-->
<!--
根节点<configuration>，包含下面三个属性:
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration>

    <!--
     子节点<property>: 用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量:
        name: 变量的名称
        value: 的值时变量定义的值
     -->
    <property name="LOG_HOME" value="/Users/liuyinggang/tmp/log"/>
    <property name="LOG_PREFIX" value="datacenter"/>

    <!--
     子节点<timestamp>: 获取时间戳字符串，他有两个属性key和datePattern
        key: 标识此<timestamp> 的名字
        datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
     -->

    <!--
    %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
    %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
    %t:输出产生该日志事件的线程名
    %f:输出日志讯息所属的类别的类别名
    %c:输出日志讯息所属的类的全名
    %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
    %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
    %m:输出代码中指定的讯息，如log(message)中的message
    %n:输出一个换行符号
    -->

    <!--
    子节点<Appender>: 设置日志信息的去向,常用的有以下几个
    ch.qos.logback.core.ConsoleAppender (控制台)
    ch.qos.logback.core.rolling.RollingFileAppender (文件大小到达指定尺寸的时候产生一个新文件)
    ch.qos.logback.core.FileAppender (文件，不推荐使用)
    -->
    <!-- 控制台输出日志 -->
    <appender name="def-log-stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <Pattern>frameHeader%-20.20d{yyyy-MM-dd HH:mm:ss}%-8.8level%-160.160logger%msg%n</Pattern>
        </encoder>
    </appender>
    <appender name="error-log-stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder charset="UTF-8">
            <Pattern>frameHeader%-20.20d{yyyy-MM-dd HH:mm:ss}%-8.8level%-160.160logger%msg%n</Pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 文件保存日志，并根据条件压缩日志 -->
    <appender name="def-log-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--&lt;!&ndash; 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建 &ndash;&gt;-->
        <File>${LOG_HOME}/${LOG_PREFIX}-info.log</File>
        <!--<encoder>：对记录事件进行格式化。-->
        <encoder>
            <!--格式化输出：%d表示日期,后面跟时间格式，默认%data{yyyy-MM-dd}，%thread表示线程名， %msg：日志消息，%n是换行符-->
            <pattern>frameHeader%-20.20d{yyyy-MM-dd HH:mm:ss}%-8.8level%-160.160logger%msg%n</pattern>
        </encoder>
        <!--RollingFileAppender:-->
        <!--滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。-->
        <!--<rollingPolicy>:当发生滚动时，决定RollingFileAppender 的行为，涉及文件移动和重命名。-->
        <!--TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--<fileNamePattern>:
            必要节点，包含文件名及“%d”转换符， “%d”可以包含一个 java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。
            如果直接使用 %d，默认格式是 yyyy-MM-dd。RollingFileAppender 的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；
            如果没设置file，活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。-->
            <!--<fileNamePattern>${LOG_HOME}/daily/${LOG_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>-->
            <!--压缩文件的保存路径以及保存格式，这里必须将文件压缩，.%i 必须有。如果按上面的配置会报错-->
            <fileNamePattern>${LOG_HOME}/daily/${LOG_PREFIX}-%d{yyyy-MM-dd}.log.%i.gz</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--保存文件的大小，超过该大小自动创建新文件。旧文件压缩保存到daily目录下-->
                <maxFileSize>1MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--&lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每个月滚动，如果是6，则只保存最近6天的文件，删除之前的旧文件 包括压缩文件 &ndash;&gt;-->
            <!--&lt;!&ndash; 每产生一个日志文件，该日志文件的保存期限天数 &ndash;&gt;-->
            <maxHistory>1</maxHistory>
        </rollingPolicy>
    </appender>
    <!-- 错误输出日志 -->
    <appender name="error-log-file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_HOME}/${LOG_PREFIX}-error.log</File>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/daily/${LOG_PREFIX}-error-%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <maxHistory>12</maxHistory>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <Pattern>[%d{dd|HH:mm:ss}] [%thread] |%level| %marker %logger{50} -> %X{rpid} %msg %n%ex</Pattern>
        </encoder>
    </appender>

<!--    <logger name="org.apache.kafka" level="OFF"/>-->
<!--    <logger name="com.mongodb" level="OFF" />-->
<!--    <logger name="com.mysql" level="OFF" />-->
    <!--root是默认的logger 这里设定输出级别是info-->
    <root level="INFO">
        <!--定义了appender，日志会通过往这两个appender里面写-->
        <appender-ref ref="def-log-file"/>
        <appender-ref ref="def-log-stdout"/>
    </root>
</configuration>