<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <context:component-scan base-package="com.xidian.iot"/>
    <context:annotation-config/>
<!--    <context:property-placeholder location="classpath:/conf/*.properties"/>-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations"> <!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
            <array>
                <value>classpath:conf/activemq-def.properties</value>
<!--                <value>classpath:conf/kafka-def.properties</value>-->
                <value>classpath:conf/redis-def.properties</value>
                <value>classpath:conf/jdbc-def.properties</value>
                <value>classpath:conf/mongo-def.properties</value>
                <value>classpath:conf/application.properties</value>
            </array>
        </property>
    </bean>

    <import resource="application-databiz.xml"/>
    <!-- mongo、redis已经包含在application-databiz.xml内 -->
    <!--    <import resource="application-mongo-def.xml"/>-->
    <!--    <import resource="application-redis-def.xml"/>-->
    <import resource="application-activemq-def.xml"/>
<!--    <import resource="application-kafka-consumer-def.xml"/>-->
<!--    <import resource="application-kafka-producer-def.xml"/>-->
    <import resource="application-chain.xml"/>

    <task:executor id="taskExecutor"
                   pool-size="${thread.pool.corePoolSize}-${thread.pool.maxPoolSize}"
                   queue-capacity="${thread.pool.queueCapacity}" />

<!--    <bean id="messageListener" class="com.xidian.iot.datacenter.listener.UpdataListener"/>-->
<!--    <bean id="messageListenerContainer" factory-bean="messageListenerContainerFactory"-->
<!--          factory-method="getKafkaMessageListenerContainer" init-method="doStart">-->
<!--        <constructor-arg index="0" value="${strMessageFactory.type}"/>-->
<!--        <constructor-arg index="1" ref="messageListener"/>-->
<!--        <constructor-arg index="2">-->
<!--            <list>-->
<!--                <value>node.updata.186610102211000001</value>-->
<!--            </list>-->
<!--        </constructor-arg>-->
<!--    </bean>-->
    <!-- 主题监听Topic-->
    <bean id="dataTopic" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg>
            <value>node.updata.*</value>
        </constructor-arg>
    </bean>
    <!-- 监听类 -->
    <bean id="receive" class="com.xidian.iot.datacenter.listener.UpdataListener"/>
    <bean id="dataListener" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destination" ref="dataTopic" />
        <property name="messageListener" ref="receive" />
    </bean>

    <bean id="serverScoket" class="java.net.ServerSocket">
        <constructor-arg value="${socket.server.port}"/>
    </bean>

    <task:scheduled-tasks>
        <task:scheduled ref="reporter" method="report" cron="*/60 * * * * ?"/>
    </task:scheduled-tasks>
</beans>
