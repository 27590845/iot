<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- Spring 组件扫描，可以根据项目需定位的更具体些。正式部署时可以删掉，扫描工作由模块调用者负责 -->
    <context:component-scan base-package="com.xidian.iot.databiz.*"/>

    <!-- 这些配置文件只在测试时生效。正式部署时可以删掉，因为配置文件只会被扫描一次，扫描工作由模块调用者负责 -->
<!--    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property-->
<!--                name="locations"> &lt;!&ndash; PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 &ndash;&gt;-->
<!--            <array>-->
<!--                <value>classpath:conf/redis-prod.properties</value>-->
<!--                <value>classpath:conf/jdbc-prod.properties</value>-->
<!--                <value>classpath:conf/mongo-prod.properties</value>-->
<!--            </array>-->
<!--        </property>-->
<!--    </bean>-->

<!--    <import resource="application-mybatis-dynamic.xml"/>-->
    <import resource="application-mybatis-def.xml"/>
    <import resource="application-mongo-def.xml"/>
    <import resource="application-redis-def.xml"/>

    <import resource="cached-uid-spring.xml"/>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 事务相关配置 -->
    <tx:annotation-driven transaction-manager="transactionManager" order="1" />

    <!-- 测试时暂时使用 simple UidGen start -->
    <!-- 设置scope="prototype"为的是，一个表操作组(一个组只对一个表有写操作，一般一个service为一个组)拥有一个uidGenerator，这样表内无重复Id，表间可能有重复Id；
        如果设置为scope="singleton"，则全局使用一个uidGenerator，那么所有表间均无重复Id，这样是不必要的 -->
<!--    <bean id="uidGen" scope="prototype" class="com.xidian.iot.common.util.uid.UidGenImpl">-->
<!--        <property name="prefixSourceUri" value="http://iot.pro.dataapi/dataapi/master/idPrefix"/>-->
<!--    </bean>-->
<!--    <bean id="uidPrefixFactory" class="com.xidian.iot.common.util.uid.UidPrefixFactoryImpl"/>-->
<!--    <bean id="uidGenerator" class="com.xidian.iot.databiz.service.impl.SimpleUidGeneratorImpl">-->
<!--        <property name="uidGen" ref="uidGen"/>-->
<!--    </bean>-->
    <!-- simple UidGen end -->
</beans>
